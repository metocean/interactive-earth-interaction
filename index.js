// Generated by CoffeeScript 1.9.2
var hammerjs;

hammerjs = require('hammerjs');

module.exports = function(options) {
  var concurrentEvents, hammer, onEnd, onStart, onWheelTimeout, wheelTimeout;
  if (options == null) {
    options = {};
  }
  if (options.onStart == null) {
    options.onStart = function() {};
  }
  if (options.onEnd == null) {
    options.onEnd = function() {};
  }
  if (options.onPan == null) {
    options.onPan = function() {};
  }
  if (options.onPinch == null) {
    options.onPinch = function() {};
  }
  if (options.onPress == null) {
    options.onPress = function() {};
  }
  if (options.onDoubleTap == null) {
    options.onDoubleTap = function() {};
  }
  if (options.onWheel == null) {
    options.onWheel = function() {};
  }
  options.wheeltimeout = 250;
  concurrentEvents = 0;
  onStart = function() {
    concurrentEvents++;
    if (concurrentEvents === 1) {
      return options.onStart();
    }
  };
  onEnd = function() {
    concurrentEvents--;
    if (concurrentEvents === 0) {
      return options.onEnd();
    }
  };
  wheelTimeout = null;
  onWheelTimeout = function() {
    wheelTimeout = null;
    return onEnd();
  };
  hammer = null;
  return {
    afterMount: function(el, projection) {
      hammer = new hammerjs(el, {});
      hammer.get('pan').set({
        direction: hammerjs.DIRECTION_ALL
      });
      hammer.get('pinch').set({
        enable: true
      });
      hammer.get('swipe').set({
        enable: false
      });
      hammer.on('pan', options.onPan);
      hammer.on('pinch', options.onPinch);
      hammer.on('press', options.onPress);
      hammer.on('doubletap', options.onDoubleTap);
      el.addEventListener('wheel', function(e) {
        if (wheelTimeout == null) {
          onStart();
          wheelTimeout = setTimeout(onWheelTimeout, options.wheeltimeout);
        } else {
          clearTimeout(wheelTimeout);
          wheelTimeout = setTimeout(onWheelTimeout, options.wheeltimeout);
        }
        e.preventDefault();
        return options.onWheel(e);
      });
      hammer.on('panstart pinchstart', onStart);
      return hammer.on('panend pinchend', onEnd);
    },
    beforeUnmount: function(el, projection) {
      while (concurrentEvents > 0) {
        onEnd();
      }
      return hammer.destroy();
    }
  };
};
